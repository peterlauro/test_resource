language: cpp

matrix:
  include:
    - name: "Bionic Clang (clang 9.0.0)"
      os: linux
      dist: bionic
      compiler: clang
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline: 'deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - g++-9
            - clang-9
      env:
        - MATRIX_EVAL="CC=clang-9 && CXX=clang++-9"

    - name: "Bionic Clang (clang 10.0.0)"
      os: linux
      dist: bionic
      compiler: clang
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline: 'deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - g++-10
            - clang-10
      env:
        - MATRIX_EVAL="CC=clang-10 && CXX=clang++-10"

    - name: "Bionic GNU G++ (g++ 9.3.0 64-bits)"
      os: linux
      dist: bionic
      compiler: gcc
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - g++-9
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"

    - name: "Bionic GNU G++ (g++ 9.3.0 32-bits)"
      os: linux
      dist: bionic
      compiler: gcc
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - g++-9
            - gcc-multilib
            - g++-multilib
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"

    - name: "Visual Studio 2017 CMake (MSBuild)"
      os: windows
      env:
        - MSBUILD_PATH="c:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin"
      script:
        - export PATH=$MSBUILD_PATH:$PATH
        - mkdir -p build && cd build
        - cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_BUILD_TYPE=Debug ..
        - MsBuild.exe StdX.sln
        - ctest -C Debug -V --output-on-failure

    - name: "Visual Studio 2019 CMake (MSBuild)"
      os: windows
      env:
        - MSBUILD_PATH="c:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\16.0\Bin"
        - PATH_FIX="c:\Windows\System32"
      script:
        - export PATH=$MSBUILD_PATH:$PATH_FIX:$PATH
        - cmd.exe //C 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat' amd64
        - mkdir -p build && cd build
        - cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=Debug ..
        - cmake --build .
        - ctest -C Debug -V --output-on-failure


before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      eval "${MATRIX_EVAL}";
      wget -O cmake.sh https://cmake.org/files/v3.14/cmake-3.14.0-Linux-x86_64.sh;
      sudo sh cmake.sh --skip-license --exclude-subdir --prefix=/usr/local;
      export PATH=/usr/local/bin:$PATH;
      cmake --version;
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      choco install visualstudio2019buildtools --package-parameters "--includeRecommended --includeOptional";
      choco install visualstudio2019-workload-vctools;
    fi

install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      echo ${CC};
      echo ${CXX};
      ${CXX} --version;
      cmake --version;
    fi

script:
  - mkdir -p build && cd build
  - cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_BUILD_TYPE=Debug ..
  - make clean && make -k
  - ctest -C Debug -V --output-on-failure